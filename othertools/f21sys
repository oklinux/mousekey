#!/bin/bash


if [ -f /home/lsf/bin/cd ];then
if [ ! -d /home/lsf/sys/dev ];then
mount --rbind /proc /home/lsf/proc
mount --rbind /srv /home/lsf/srv
mount --rbind /sys /home/lsf/sys
mount --rbind /run /home/lsf/run
mount --rbind /dev /home/lsf/dev
fi
sed -e '1,/bindata\//d' /bin/f21sys>/home/lsf/boot.sh
chmod 777 /home/lsf/boot.sh
chroot /home/lsf /boot.sh
if [ -d /home/lsf/dev/shm ];then
umount /home/lsf/proc &&\
umount /home/lsf/sys &&\
umount /home/lsf/srv &&\
umount /home/lsf/run &&\
umount /home/lsf/dev
fi
exit
fi

#/bindata//
#!/bin/bash -ex

dns="8.8.8.8
8.8.4.4
223.5.5.5
223.6.6.6
114.114.114.114
180.78.78.78"
echo >/etc/resolv.conf
for d in $dns ;do
echo "nameserver $d" >>/etc/resolv.conf
done

cd;if [ ! -f "$HOME/gcc-8.1.0.tar.gz" ]; then
wget http://ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz;fi
if [ ! -f gcc-8.1.0/.build-done ]; then
tar -xzvf gcc-8.1.0.tar.gz
cd gcc-8.1.0
./contrib/download_prerequisites
./configure  --prefix=/usr --enable-checking=release --enable-languages=c,c++ --disable-multilib --with-abi=64
make -j4
yum remove -y gcc gcc-*
yum remove -y g++ g++-*
make install && echo >../.build-done
mkdir-p /usr/lib64/ccahe
cd /usr/lib64/ccahe
ln -sf /usr/bin/gcc .
ln -sf /usr/bin/g++ .
ln -sf /usr/bin/gcc cc
ln -sf /usr/bin/g++ c++
fi

cd


case $(python3 --version) in
*3.8.*) ;;
*) wget -O py.tar.xz https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz
xz -d py.tar.xz
tar xvf py.tar
cd  Python-3.8.0
./configure --prefix=/usr
make && yum remove python3
make install
cd ;;
esac

pydir=/usr/bin

export PATH="$HOME/ninja:$HOME/depot_tools:$PATH"
#export http_proxy=45.252.63.93:8088
#export https_proxy=45.252.63.93:8088

if [ ! -f depot_tools/.up-python3 ];then
yum install git nodejs npm re2c -y
git config --global http.postBuffer 232333111
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
if [ -d depot_tools ];then
cd depot_tools
tee <<str>.up-python3
[ ! -f \$BOOTSTRAP_PYTHON_BIN ]&&mkdir -p \$(dirname "\$BOOTSTRAP_PYTHON_BIN") &&ln -sf $pydir/python3 \$BOOTSTRAP_PYTHON_BIN
str
sed -i  "#$pydir#d" bootstrap_python3
sed -i  '/BOOTSTRAP_PYTHON_BIN=/r .up-python3' bootstrap_python3
mkdir -p python-bin
ln -sf $pydir/python3 python-bin/
fi;fi

cd;if [ ! -d "$HOME/cmake" ]; then
git clone https://github.com/Kitware/cmake.git ;fi


if [ ! -f cmake/.build-done ]; then
yum remove -y cmake && echo
cd cmake
export CXX_FLAGS="-std=gun++98"
./configure --prefix=/usr --no-system-libs
##cmake . -DBUILD_TESTING=OFF
gmake &&make install && echo >.build-done
fi

cd;if [ ! -d "$HOME/ninja" ]; then
git clone https://github.com/ninja-build/ninja.git -b v1.8.2 ;fi
cd ninja && if [ ! -f .build-done ]; then
./configure.py --bootstrap && echo >.build-done
fi

cd;if [ ! -d "$HOME/llvm-project" ]; then
 git clone https://github.com/llvm/llvm-project ;fi

cd llvm-project/
if [ ! -f .build-done ]; then
yum remove -y clang && echo
yum install -y libxml2-dev && echo

sed -i '/CMAKE_C_FLAGS. -mxgot /d' llvm/CMakeLists.txt
cmake -S llvm -G "Unix Makefiles" \
-DCMAKE_INSTALL_PREFIX=/usr \
-DLLVM_ENABLE_PROJECTS="clang" \
-DCMAKE_BUILD_TYPE=RelWithDebInfo \
-DCMAKE_C_FLAGS_RELWITHDEBINFO='-O3 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -mabi=64 -march=loongson3a -fno-delete-null-pointer-checks -Wa,' \
-DCMAKE_CXX_FLAGS_RELWITHDEBINFO='-O3 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches  -mabi=64 -march=loongson3a -fno-delete-null-pointer-checks -Wa,'

echo 开始构建LLVM...

make 
make install
echo >.build-done
fi

cd;if [ ! -d "$HOME/gn" ]; then
git clone https://gn.googlesource.com/gn ;fi
cd gn && if [ ! -f .build-done ]; then
ln -sf /usr/bin/g++ clang++
python build/gen.py
PATH="./:$PATH" ninja -C out/ && echo >.build-done
fi

mkdir -p ~/nw54-build

dosync() {
#~/depot_tools/gclient config --name=src https://chromium.googlesource.com/chromium/src
gclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw54
mkdir -p ~/nw54-build/src/content/nw
cd ~/nw54-build/src/content/nw
~/depot_tools/gclient config --name=src https://github.com/nwjs/nw.js
mkdir -p ~/nw54-build/src/third_party/node-nw
cd ~/nw54-build/src/third_party/node-nw
~/depot_tools/gclient config --name=src https://github.com/nwjs/node
mkdir -p ~/nw54-build/src/v8
cd ~/nw54-build/src/v8
~/depot_tools/gclient config --name=src https://github.com/nwjs/v8
cd ~/nw54-build/
gclient sync --with_branch_heads
./src/build/install-build-deps.sh
}

dogit() {
git clone https://github.com/nwjs/chromium.src ./tmp --origin nw54 
cp -rf tmp/* .
mkdir -p ~/nw54-build/src/content/nw
cd ~/nw54-build/src/content/nw
git clone https://github.com/nwjs/nw.js  ./tmp
cp -rf tmp/* .
mkdir -p ~/nw54-build/src/third_party/node-nw
cd ~/nw54-build/src/third_party/node-nw
git clone https://github.com/nwjs/node ./tmp
cp -rf tmp/* .
mkdir -p ~/nw54-build/src/v8
cd ~/nw54-build/src/v8
git clone https://github.com/nwjs/v8 ./tmp
cp -rf tmp/* .
cd ~/nw54-build/
./src/build/install-build-deps.sh
}

buildnwjs() {
cd src
cp "$HOME/gn/out/gn" buildtools/linux64/
cp "$HOME/gn/out/gn" "$HOME/deepot_tools"
export GN_CONFIGS="{
is_debug=false
is_clang=false
is_component_ffmpeg=true
use_sysroot=false
use_gold=false
proprietary_codecs=true
enable_widevine=false
fatal_linker_warnings=false
link_pulseaudio=true
treat_warnings_as_errors=false
nwjs_sdk=false
}"
 #mv v8 ~/
 #git clone https://github.com/nwjs/v8.git
 gn gen out/nw --args="${GN_CONFIG[*]}"
 ./build/util/lastchange.py  build/util/LASTCHANGE
 ./build/util/lastchange.py -s third_party/node-nw/ -o build/util/LASTCHANGE.blink
 #mkdir -p third_party/llvm-build/Release+Asserts/bin/
 #ln -sf /root/llvm-project/bin/clang++ third_party/llvm-build/Release+Asserts/bin/clang++
 grep find-bad-construts -nR 
 ninja -C out/nw nwjc
 export GYP_DEFINES="target_arch=mips64el debug=false clang=false sysroot=false host_arch=mips64el"
 GYP_CHROMIUM_NO_ACTION=0 ./build/gyp_chromium -I third_party/node-nw/common.gypi -D building_nw=1 third_party/node-nw/node.gyp
 ninja -C out/Release node
 ninja -C out/nw copy_node
}


cd ~/nw54-build
echo "是否同步(y/n)？";read yn
case "$yn" in
s)bash;exit ;;
y*|Y*)dosync 
buildnwjs;;
g*|G*)dogit
buildnwjs;;
*)buildnwjs ;;
esac

exit





mkdir -p $HOME/nwjs
 cd $HOME/nwjs

"custom_deps" : {
  "src/third_party/WebKit/LayoutTests": None,
   "src/chrome_frame/tools/test/reference_build/chrome": None,
  "src/chrome_frame/tools/test/reference_build/chrome_win": None,
  "src/chrome/tools/test/reference_build/chrome": None,
  "src/chrome/tools/test/reference_build/chrome_linux": None,
  "src/chrome/tools/test/reference_build/chrome_mac": None,
  "src/chrome/tools/test/reference_build/chrome_win": None,
 }
is_debug=false
 is_component_ffmpeg=true
target_cpu="mips64el"
cd src
GYP_CHROMIUM_NO_ACTION=0
./build/gyp_chromium -I \ third_party/node-nw/common.gypi -D building_nw=1 -D clang=1 third_party/node-nw/node.gyp
./build/gyp_chromium -D component=shared_library -I third_party/node-nw/common.gypi -D building_nw=1 -D clang=1 third_party/node-nw/node.gyp
cd src
 ninja -C out/nw nwjs
cd src ninja -C out/Release node
cd src ninja -C out/nw copy_node
‘nwjs_sdk=false 
enable_nacl=true
