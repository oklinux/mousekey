#!/bin/bash

shuru()
{
[ "$1" != auto ] && echo "user password" && read user pass
[ -z "$pass" ] && [ -f /etc/vpn-userscfg ] && . /etc/vpn-userscfg
[ -z "$pass" ] && shuru
[ "$1" != auto ] && [ ! -z "$1" ] && srv=$1
[ -z "$srv" ] && echo "server" && read srv
[ "$srv" == d3 ] && srv=43.231.184.83
[ "$srv" == lro ] && srv=103.235.222.153
[ -z "$srv" ] && exit 1
[ ! -z "$pass" ] && sed -i "/pptpmyvpndevice/d" /etc/ppp/chap-secrets
sed -i "/#/d" /etc/ppp/chap-secrets
sed -i "/^$/d" /etc/ppp/chap-secrets
if [ "$1" != auto ];then
tee <<vpn>/etc/vpn-userscfg
srv=$srv
user=$user
pass=$pass
vpn
fi
}
FHQ() {
iptables -t  nat -I POSTROUTING -s 192.168.10.0/24 -o ppp0 -j MASQUERADE
iptables -t  nat -A POSTROUTING -s 192.168.10.0/24 -o eth0 -j MASQUERADE
iptables -t  nat -A POSTROUTING -s 192.168.10.0/24 -o ppp0 -j MASQUERADE
ip addr|grep global\ ppp0|while read LINK ip peer gay global pppdev ;do
# diptables -t net -I POSTROUTING -s 192.168.10.0/24 -o ppp0 -t SNAT --to-source $ip 
break
done
}

fwq1() {
[ -f /etc/ppp/options.pptpd ] && OPTIONS=/etc/ppp/options.pptpd
[ -f /etc/ppp/pptpd-options ] && OPTIONS=/etc/ppp/pptpd-options
setip="net.ipv4.ip_forward"
tee <<cfg>/etc/pptpd.conf
option $OPTIONS
logwtmp
connections 15
localip 192.168.10.199
remoteip 192.168.10.150-230,192.168.10.245
cfg
sed -i "/$setip/c $setip=1" /etc/sysctl.conf
sysctl -p
}

khd () {
shuru $1
[ ! -x /bin/pptpsetup ] && sed -e '1,/perl\\pptpsetup/d' "$0" >/bin/pptpsetup &&   
chmod +x /bin/pptpsetup
pptpsetup --create pptpmyvpndevice --server $srv --username $user --password $pass --encrypt --start
if [ -f /sbin/route ] ;then
route|while read ra rb rc rd re rf rg rh;do
case $rh in
ppp*)route add default gw $ra $h;;
esac
done;fi
}

zidong() {
tee <<service>/etc/init.d/okvpn
#!/bin/bash
### BEGIN INIT INFO
# Provides:          okvpn
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      1
# Short-Description: OKVPN
# Description:       Auto Start PPTP VPN By sjchenkan
### END INIT INFO
export PATH=/bin:/sbin:$PATH
case "\$1" in
start) /bin/vpn-pptp auto 2>&1 >tmp/vpnook.log & ;;
stop) echo not stop ;;
esac
service
chmod +x /etc/init.d/okvpn
if [ -x /sbin/chkconfig ];then
chkconfig okvpn on
elif [ -f /usr/sbin/update-rc.d ];then
update-rc.d okvpn start 80 2 3 4 5 . stop 80 1 .;fi


[ -f /dev/shm/vpn.look ] &&echo "VPN Auro Runing...."&& exit
while [ ppp == ppp ];do
ppp="$(ip addr|grep global\ ppp0)"
[ -z "$ppp" ]  && khd auto
echo PPTP Look>/dev/shm/vpn.look;sleep 180
[ ! -f /dev/shm/vpn.look ] && exit 0
done 
}

if [ $(id -u) != 0 ];then
sudo bash "$0" "$@"
exit;fi
[ ! -f /bin/vpn-pptp ] && cp "$0" /bin/vpn-pptp && chmod +x /bin/vpn-pptp


case "$1" in
auto) zidong &;;
iptables) FHQ ;;
defsrv)  fwq1 ;;
*) khd  "$1";
esac
 
	
exit 0
#perl\pptpsetup
#!/usr/bin/perl

use strict;
use Getopt::Long;

use vars qw($VERSION);
$VERSION = '0.03';

# Command-line parameters:

# actions
my ( $_create, $_delete, $_help );

# values
my ( $SERVER, $DOMAIN, $USERNAME, $PASSWORD, $ENCRYPT, $START );

my $result = GetOptions(
    "create|c=s"   => \$_create,    # --create foo -> &create("foo")
    "delete=s"     => \$_delete,    # --delete foo -> &delete("foo")
    "help|h"       => \$_help,      # --help       -> &help()
    "server|s=s"   => \$SERVER,
    "domain|d=s"   => \$DOMAIN,
    "username|u=s" => \$USERNAME,
    "password|p=s" => \$PASSWORD,
    "encrypt|e"    => \$ENCRYPT,
    "start"        => \$START,
);

if ($_create) {
    &create($_create);
} elsif ($_delete) {
    &delete($_delete);
} elsif ($_help) {
    &help();
} else {
    die "$0: too few arguments.\nTry '$0 --help' for more information.\n";
}

exit;

####

sub create {
    my $TUNNEL = shift;

    # system checking
    &Check_MPPE_in_kernel
        or die "$0: couldn't find MPPE support in kernel.\n";

    &Check_MPPE_in_pppd
        or die "$0: couldn't find MPPE support in pppd.\n";

    # input validation
    ($TUNNEL) = $TUNNEL =~ m{^(\w+)$}
      or die "$0: invalid tunnel name.\nTry '$0 --help' for more information.\n";
    ($SERVER) = $SERVER =~ m{^(.+)$}
      or die "$0: invalid server.\nTry '$0 --help' for more information.\n";
    ($USERNAME) = $USERNAME =~ m{^(.+)$}
      or die "$0: invalid username.\nTry '$0 --help' for more information.\n";

    # ask password
    if ( !$PASSWORD ) {
        print "Password: ";
        $PASSWORD = <STDIN>;
        chomp $PASSWORD;
    }

    # put '\' between domain and username IF specified a domain
    $DOMAIN = "$DOMAIN\\" if $DOMAIN;

    # create or add lines to the /etc/ppp/chap-secrets file,
    # which holds usernames and passwords
    my $chap_secrets_file = '/etc/ppp/chap-secrets';
    open( FILE, ">>$chap_secrets_file" )
      or die "$0: can't write to '$chap_secrets_file': $!\n";

    print FILE "\n# added by pptpsetup for $TUNNEL\n$DOMAIN$USERNAME $TUNNEL \"$PASSWORD\" *\n";

    close FILE;

    # create a /etc/ppp/peers/$TUNNEL file
    my $tunnel_file = "/etc/ppp/peers/$TUNNEL";
    open( FILE, ">$tunnel_file" )
      or die "$0: can't write to '$tunnel_file': $!\n";

    print FILE <<"TUNNEL";
# written by pptpsetup
pty "pptp $SERVER --nolaunchpppd"
lock
noauth
nobsdcomp
nodeflate
name $DOMAIN$USERNAME
remotename $TUNNEL
ipparam $TUNNEL
TUNNEL

    print FILE "require-mppe-128\n" if $ENCRYPT;

    close FILE;

    # start tunneling
    if ($START) {
        system("pppd call $TUNNEL updetach");
    }
}

####

sub help {
    print <<'EOF';
pptpsetup --create <TUNNEL> --server <SERVER> [--domain <DOMAIN>]
          --username <USERNAME> [--password <PASSWORD>]
          [--encrypt] [--start]

pptpsetup --delete <TUNNEL> 

Options:

* the name you wish to use to refer to the tunnel (you choose it),
* the IP address or host name of the server,
* the authentication domain name (optional),
* the username you are to use,
* the password you are to use,
* whether encryption is required,
* whether to start the connection after configuration.

pptpsetup - Point-to-Point Tunneling Protocol setup

Copyright (C) 2006 Nelson Ferraz

pptpsetup comes with ABSOLUTELY NO WARRANTY; for details see source.
This is free software, and you are welcome to redistribute it
under certain conditions; see source for details.

EOF

    exit;
}

####

sub delete {
    my $tunnel = shift;

    # input validation
    ($tunnel) = $tunnel =~ m{^(\w+)$}
      or die "$0: invalid tunnel name.\nTry '$0 --help' for more information.\n";

    # delete tunnel file
    my $tunnel_file = "/etc/ppp/peers/$tunnel";
    unlink $tunnel_file
        or die "$0: can't delete '$tunnel_file': $!\n";

    # delete entry from chap-secrets
    my $chap_file = '/etc/ppp/chap-secrets';

    open( FILE, $chap_file )
        or die "$0: can't read '$chap_file': $!\n";
    my @chap = <FILE>;
    close FILE;

    my $new_chap = '';
    foreach (@chap) {
        $new_chap .= $_ unless /\b$tunnel\b/;
    }

    # backup
    rename( $chap_file, "$chap_file.bkp" );

    my $umask_save = umask();
    umask 0077;
    # write new chap-secrets
    open( FILE, ">$chap_file" )
        or die "$0: can't write '$chap_file': $!\n";
    print FILE $new_chap;
    close FILE;
    umask $umask_save;

    exit;
}

### AUXILIAR SUBS ###

sub Check_MPPE_in_kernel {
    my $command = q/modprobe ppp-compress-18/;
    if (system( $command ) == 0) {
        # no error!
        return 1;
    } else {
        return 0;
    }
}

sub Check_MPPE_in_pppd {
    my $command = q/strings `which pppd`|grep -i mppe|wc --lines/;
    my $answer  = `$command`;
    if ($answer > 0) {
        # ok!
        return 1;
    } else {
        return 0;
    }
}

__END__

=head1 NAME

pptpsetup - Point-to-Point Tunneling Protocol setup

=head1 SYNOPSIS

    pptpsetup --create <TUNNEL> --server <SERVER> [--domain <DOMAIN>]
              --username <USERNAME> [--password <PASSWORD>]
              [--encrypt] [--start]

    pptpsetup --delete <TUNNEL>

=head1 DESCRIPTION

PPTP Client is a Linux, FreeBSD, NetBSD and OpenBSD client for the 
proprietary Microsoft Point-to-Point Tunneling Protocol, PPTP. 

This script configures PPTP Client on Linux.

=head1 OPTIONS

=over 16

=item --create TUNNEL

create a tunnel named TUNNEL

=item --delete TUNNEL

delete the file /etc/ppp/peers/TUNNEL and any lines from 
/etc/ppp/chap-secrets that contains "TUNNEL" as a single word

=item --server SERVER

the IP address or host name of the server

=item --domain DOMAIN

the authentication domain name (optional)

=item --username USERNAME

the username you are to use

=item --password PASSWORD

the password you are to use. If you don't specify a password, 
pptpsetup will ask for one.

=item --encrypt

whether encryption is required

=item --start

whether the connection should be started after configuration.

=back

=head1 AUTHOR

Nelson Ferraz <nferraz at gmail.com>,
based on James Cameron's PPTP Client Debian HOWTO.

=head1 SEE ALSO

=over 16

=item PPTP Client Debian HOWTO

http://pptpclient.sourceforge.net/howto-debian.phtml

=item PPTP Client Diagnosis HOWTO

http://pptpclient.sourceforge.net/howto-diagnosis.phtml

=back

=head1 COPYRIGHT

pptpsetup - Point-to-Point Tunneling Protocol setup

Copyright (C) 2006 Nelson Ferraz

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
