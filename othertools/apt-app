#!/bin/bash
#!/bin/bash

mirapt() {
daoroot $1
mkdir -p $ML/mirror-$JC/$FWQ

if [ ! -z "$FWQ" -a ! -z "$DH" ];then
mount -o bind $ML/$JC $ML/mirror-$JC/$FWQ
JX="
deb http://$FWQ/ $DH main restricted universe multiverse
deb http://$FWQ/ $DH-security main restricted universe multiverse
deb http://$FWQ/ $DH-updates main restricted universe multiverse
deb http://$FWQ/ $DH-proposed main restricted universe multiverse
deb http://$FWQ/ $DH-backports main restricted universe multiverse

deb-src http://$FWQ/ $DH main restricted universe multiverse
deb-src http://$FWQ/ $DH-security main restricted universe multiverse
deb-src http://$FWQ/ $DH-updates main restricted universe multiverse
deb-src http://$FWQ/ $DH-proposed main restricted universe multiverse
deb-src http://$FWQ/ $DH-backports main restricted universe multiverse
"
fi

for i in i386 amd64 ;do
tee <<file>/etc/apt/mirror.list
############# config ##################

set base_path $ML/mirror-$JC
set defaultarch $i
set mirror_path  $ML/mirror-$JC
set nthreads     25
set _tilde 0

$JX
#
clean http://$FWQ
file
if [ ! -f /usr/bin/apt-mirror ];then
apt install apt-mirror;fi
apt-mirror
done
umount $ML/mirror-$JC/$FWQ
mkdir -p $ML/.deb/$JC
chown -R okapps:okapps $ML
chmod -R 755 $ML
mkdir -p $ML/.deb/$JC
for d in $(find $ML/mirror-$JC/ -name "*.deb") ;do
[ ! -f $ML/$JC/.look/$(basename $d).look -a -d "$ML/mirror-$JC" -a "$LX" == "app" ] && cp -rf $d $ML/.deb/$JC/
done
jlapt
}

xzdeb() {
dq=$(pwd)
debmc=""
mkdir -p $ML/$JC/.look
cd $ML/$JC/.look
sd=/dev/shm/okapps-list.lokk
[ ! -f $sd ]&&rm ./*Packages ./*.deb -rf
echo "sleep 85533;rm $sd">$sd;sh $sd &
echo "$JX"|while read ja jb jc jd je;do
if [ ! -z "$jc" -a ! -z "$jd" ] ;then
xzdeb1 "$jb/dists/$jc/$jd/binary-i386/Packages-$je"
xzdeb1 "$jb/dists/$jc/$jd/binary-amd64/Packages-$je"
xzdeb1 "$jb/dists/$jc/$jd/binary-mips64le/Packages-$je"
xzdeb1 "$jb/dists/$jc/$jd/binary-arm64/Packages-$je"
fi;done
for i in $XZAPP ;do
xzdeb1 $i
done
echo >zzzzzzz.down
for c in *.down ;do
b=$(echo "$c"|sed -e 's/_[0-9].*_//g')
b=$(echo "$b"|sed -e 's/_[0-9].*-[0-9]\.//g')
[ -f "$c" ] && if [ "$b" != "$debmc" -a ! -z "$debmc" ];then
sh ./$e &
sleep 2
elif [ "$b" == "$debmc" -a ! -f "$b" ];then
rm "$e";fi
e=$c
debmc=$b
done
cd "$dq"
}

xzdeb1() {
case $1 in
*--nodown--*)
url=$(echo "$1"|sed -e 's:--nodown--.*::g')
nodown=$(echo "$1"|sed -e 's/.*--nodown--//g')
nodown="$(echo "$nodown"|sed -e 's:/: :g')"
xzdeb1 "$url"
nodown="";;
dir-*|*-/-)
preurl=$(echo "$1"|sed -e 's/dir-http/http/g')
rrl=$(echo "$preurl"|sed -e 's:-/-.*:/:g')
for name in [a-z] [0-9] lib[a-z] ;do
kkdeblb=$(curl "$url"|sed -n ":$name/\":p"|\
sed -e 's/.*href="//g' |\
sed -e 's/\".*//g' |\
sed -e 's/<.*//g' )
for ci in $kkdeblb;do
xzdeb1 $ib$ci-/-$ib
done
done ;;
*-/-*)
ia=$(echo $1|sed -e 's:.*-/-::g')
ib=$(echo $1|sed -e 's:-/-.*:/:g')
kkdeblb=$(curl $ib|sed -n "/$ia/p"|\
sed -e 's/.*href="//g' |\
sed -e 's/\".*//g' |\
sed -e 's/<.*//g' )
for ci in $kkdeblb;do
xzdeb1 $ib$ci
done ;;
*/|deb-*)
url=$(echo "$1"|sed -e 's/deb-http/http/g')
deblb=$(curl "$url"|sed -n "/\.deb\"/p")
deblb=$(echo "$deblb"|sed -e 's/deb".*/deb/g')
deblb=$(echo "$deblb"|sed -e "s/.*href=\"//g")
deblb=$(echo "$deblb"|sed -e "s/.*\"http/http/g")
ia=""
ic=$1
xzdeb1 deb;;
*/dists*)
ia=$(echo $1|sed -e 's:.*Packages-::g')
ib=$(echo $1|sed -e 's:Packages-.*:Packages:g')
ic=$(echo $1|sed -e 's:/dists/.*:/:g')
id=$(echo "$ib"|sed -e 's:[/|\:]:-:g')
[ ! -f "$id" ] && curl "$ib" > "$id" 2>/dev/null
for deblb in $(cat "$id"|sed -n "/Filename:/p"|\
sed -e "s/Filename://g") ;do
case $deblb in
*/$ia*)xzdeb1 deb ;;
esac
done;;
deb)
echo $deblb >>$ML/.DEB.LIST
for d in $deblb ;do
case "$d" in
*_ppc*|*_armhf*);;
http*)c=$(basename $d)
if [ ! -f "$ML/$JC/.look/$c.look" ] ;then
echo "[ ! -f \"$c\" ] && wget -c -N \"$d\" && $0 $c && rm $c.down">$c.down
echo >"$c.look";fi;;
*)c=$(basename $d)
for i in $nodown;do
case "$c" in
$i*)echo >$c.look ;;
esac
done
if [ ! -f "$ML/$JC/.look/$c.look" ] ;then
echo "[ ! -f \"$c\" ] && wget -c -N \"$ic$d\" && $0 $c && rm $c.down">$c.down
echo >"$c.look";fi;;
esac
done
;;
esac

}


yapt() {
mkdir -p $1/$3-$2 ;cd $1
mkdir -p deb-$2
tee <<FXTXET>$3-$2/Release
in: $MC
Label: $MC
Suite: $JC
Version:$BB
Codename: $3-$2/
Description:　$MC $BB
MD5Sum:
FXTXET
case $3 in
os|apt)
if [ -d dists ];then
echo "">$3-$2/Packages
echo "">$3-$2/Sources
for p in dists/$DH/*/*-$2/Packages dists/$DH*/*/*-$2/Packages;do
if [ -f $p ];then
cat $p >> $3-$2/Packages
fi;done
for p in dists/$DH/*/source/Sources dists/$DH*/*/source/Sources;do
if [ -f $p ];then
cat $p >> $3-$2/Sources
fi;done
else
if [ ! -f $3-$2/Packages ];then
dpkg-scanpackages deb-$2 /dev/null >$3-$2/Packages 
dpkg-scansources . /dev/null >$3-$2/Sources
fi;fi

cat $3-$2/Packages|gzip -c9>$3-$2/Packages.gz
cat $3-$2/Sources|gzip -c9>$3-$2/Sources.gz
apt-ftparchive release $3-$2 >>$3-$2/Release
rm $3-$2/InRelease $3-$2/Release.gpg -rf
;;
*)
if [ ! -f /dev/shm/okapps.look ]; then
echo >/dev/shm/okapps.look
echo "正在生成$2软件包列表，请耐心等待。。。。。。"
dpkg-scanpackages deb-$2 /dev/null >$3-$2/Packages 
cat $3-$2/Packages|gzip -c9>$3-$2/Packages.gz
apt-ftparchive release $3-$2 >>$3-$2/Release
rm $3-$2/InRelease $3-$2/Release.gpg -rf
mkdir -p ../tmp/deb-$2
mkdir -p .look
mkdir -p info/$2
for Y in $(ls deb-$2/);do
name=$(echo $(dpkg-deb --info deb-$2/$Y|grep "Package:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
dpkg-deb --info "deb-$2/$Y">"info/$2/$name"
[ ! -f .look/$Y.look ]&& echo >.look/$Y.look
mv deb-$2/$Y ../tmp/deb-$2/ ;done
sed -n '/Filename/p' $3-$2/Packages|while read a b;do
[ -f "../tmp/$b" ] && mv -f ../tmp/$b deb-$2/
done
rm /dev/shm/okapps.look
fi ;;
esac

if [ ! -f "$3-$2/Release.gpg" ];then
# gpg -abs --default-key $gpgkey -o $3-$2/Release.gpg $3-$2/Release
# gpg --clearsign --default-key $gpgkey -o $3-$2/InRelease $3-$2/Release
gpg -abs  -o $3-$2/Release.gpg $3-$2/Release
gpg --clearsign -o $3-$2/InRelease $3-$2/Release
tar czf info.tgz info/ icons/
yuan="deb http://$BJFWQ/$1 $3-$2/
# deb-src http://$BJFWQ/$1 $3-$2/
$yuan"
echo 列表生成完毕！
fi
cd ..
}

jlapt() {
if [ ! -e /usr/bin/dpkg-scanpackages ];then
apt-get -y install dpkg-dev ;fi

if [ ! -f .$JC-linux.DB ];then
gpg -a --export -a >$JC/$JC-linux.pub && \
gpg -a --export-secret-keys -a >.$JC-linux.sub
gpg --export-ownertrust >.$JC-linux.DB
elif [ ! -f $HOME/.okapps-key.sub ];then
cp .$JC-linux.sub $HOME/.okapps-key.sub
gpg --import .$JC-linux.sub ;fi

yuan=""
scdeb $ML/.deb/$JC/*
rm $JC/info -rf

case $LX in
os)
if [ -d $JC/apt-amd64 ];then
yapt $JC amd64 apt
yapt $JC i386 apt
else
yapt $JC mips os
yapt $JC amd64 os
yapt $JC i386 os
yapt $JC amd64 update ;fi
list=/etc/apt/sources.list;;
app)
yapt $JC amd64 app
yapt $JC i386 app
yapt $JC arm64 app
yapt $JC loongson mips
list=/etc/apt/sources.list.d/$JC.list;;
esac
tee <<rtf>$JC/$JC-apt.list
#$ZZ desktop v$BB

$yuan

rtf
case $JC in
*-libs);;
*)
[ -f $JC-libs/$JC-libs-apt.list ]&& cat $JC-libs/$JC-libs-apt.list >>$JC/$JC-apt.list

case $0 in
./*|/bin/*)
mkdir -p .deb/$JC
tee <<shell>$JC-up-deb.sh
#!/bin/bash
if [ ! -f ~/.ssh/\$(basename \$0 ) ];then
ssh-copy-id $SSHFWQ -p 22
cp \$0 ~/.ssh/\$(basename \$0 ) ;fi
for a in "\$@" ;do
scp -P 22 \$a $SSHFWQ:$ML/.deb/$JC/\$(basename \$a);;
done
ssh $SSHFWQ bash okapps build &
shell
;;
esac
tee<<ttttt>$JC/install-$JC.sh
#!/bin/bash
cd /tmp
wget http://$BJFWQ/$JC/$JC-apt.list
wget http://$BJFWQ/$JC/$JC-linux.pub
sudo mv -f $JC-apt.list $list
sudo apt-key add $JC-linux.pub
rm $JC-linux.pub
apt update
ttttt

;;
esac
}

scdeb() {
cd "$DQML"
[ "deb" == "$1" ] && scdeb $(ls ./*.deb)
for a in $@ ;do
if [ -f "$a" ];  then
case $a in
sign.*|signed_*|*_uos_*|org.*|com.*|cn.*)$0 rebuild $a;;
*/sign.*|*/signed_*|*/org.*|*/com.*|*/cn.*)$0 rebuild $a;;
esac
name=$(echo $(dpkg-deb --info $a|grep "Package:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
ver=$(echo $(dpkg-deb --info $a|grep "Version:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
arch=$(echo $(dpkg-deb --info $a|grep "Architecture:"|sed -e 's/.*://g'|tr -d '\r'))
case "$arch" in
*x64*|*amd64*|*all*) cpu=amd64;;
*ia32*|*i386*) cpu=i386;;
*arm*) cpu=arm64;;
*mips*) cpu=loongson;;
esac
if [ ! -z "$cpu" ];then
mkdir -p $ML/$JC/deb-$cpu
mv "$a" $ML/$JC/deb-$cpu/"$name""_$ver""_$arch.deb"
tubiao $ML/$JC/deb-$cpu/"$name""_$ver""_$arch.deb"
fi ;fi ;done
cd $ML
}

tubiao() {
cd "$DQML"

mkdir -p $ML/$JC/icons
[ "1" == "$#" -a "icons" == "$1" ] &&tubiao $(ls $ML/$JC/deb-*/*.deb)
for a in $@ ;do
if [ -f "$a" ];  then
name=$(echo $(dpkg-deb --info $a|grep "Package:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
dpkg-deb -R "$a" tmp-$$
for cc in $(find tmp-$$ -name *.desktop) ;do
icon=$(basename $(cat "$cc"|grep Icon|sed -e 's/Icon=//g'))
[ ! -z "$icon" ] &&for picon in $(find tmp-$$/ -name $icon* ) ;do
case "$picon" in
*.xpm)cp "$picon" "$ML/$JC/icons/$name.xpn";;
*.png)cp "$picon" "$ML/$JC/icons/$name.png";;
*.svg)cp "$picon" "$ML/$JC/icons/$name.svg";;
esac
done;done
rm tmp-$$  -rf
fi;done

}

touos() {
cd "$DQML"

[ "1" == "$#" ] && touos $(ls ./)
for a in $@ ;do
if [ -f "$a" ];  then
case $a in
sign.*|signed_*|*_uos_*|org.*|com.*|cn.*) ;;
*/sign.*|*/signed_*|*/org.*|*/com.*|*/cn.*);;
*.deb)name=$(echo $(dpkg-deb --info $a|grep "Package:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
ver=$(echo $(dpkg-deb --info $a|grep "Version:"|sed -e 's/.*://g'|tr -d '\r')|sed -e 's/ .*//g')
arch=$(echo $(dpkg-deb --info $a|grep "Architecture:"|sed -e 's/.*://g'|tr -d '\r'))
[ -f "$ML/$JC/.appid-$name" ] && . "$ML/$JC/.appid-$name"
[ -z "$appid" ]&& echo "请输入属性和组织名，如“com redflag-linux”" && read  aa ab
[ ! -z "$ab" ] && appid="$aa.$ab" && echo "appid=$appid">"$ML/$JC/.appid-$name"
[ -z "$appid" ] && exit
case "$arch" in
*x64*|*amd64*) arch=amd64;;
*ia32*|*i386*) arch=i386;;
esac
dpkg-deb -R $a uos-$$
cd uos-$$
data="opt/apps/$appid.$name"
mkdir -p "$data/entries"
mkdir -p "$data/files"
tee <<appinfo>"$data/info"
{
	"appid": "$appid.$name",
	"name": "$name",
	"version": "$ver",
	"arch": ["$arch"],
	"permissions": {
		"autostart": false,
		"notification": false,
		"trayicon": false,
		"clipboard": false,
		"account": false,
		"bluetooth": false,
		"camera": false,
		"audio_record": false,
		"installed_apps": false
	}
}
appinfo
cat $(find usr/share -name "*.desktop")|grep Exec |while read ename a c d;do
ename=$(basename $(echo $ename|sed -e 's/Exec=//g'))
edir=$(dirname $(echo $ename|sed -e 's/Exec=//g'))
tee <<bashfile>$data/files/run-$ename
#!/bin/sh
LD_LIBRARY=\$LD_LIBRARY:/$data/lib
LD_LIBRARY_DIR=\$LD_LIBRARY_DIR:$data/lib
export \$LD_LIBRARY
export \$LD_LIBRARY_DIR

/$data/files/$ename \$@
bashfile
chmod +x $data/files/run-$ename
case $edir in
.)[ -f "usr/bin" ] &&mv -f "usr/bin"/* "$data/files/" ;;
*)mv -f "$edir"/* "$data/files/";;
esac
for bb in  opt/*/$name usr/share/*/$name usr/lib/*/$name ;do
[ -f "$bb" ] && mv -f $(dirname $bb)/* "$data/files/" && rm -rf $(dirname $bb)
done
[ -d "usr/lib" ] &&mv -f "usr/lib" "$data/files/"
[ -d "usr/lib64" ] &&mv -f "usr/lib64" "$data/files/"
[ -d  "usr/share/doc" ] && mv -f usr/share/doc "$data/files/"
mv -f usr/share/applications usr/share/autostart "$data/entries/" 2>/dev/null
for cc in $(find $data/entries -name *.desktop) ;do
ccc="$(dirname $cc)/$appid.$name.desktop"
[ -f "$cc" ] && mv "$cc" "$ccc"
sed -i "s:Exec.*$eame.:Exec=/$data/files/run-$ename :g" $ccc
icon=$(basename $(cat "$ccc"|grep Icon|sed -e 's/Icon=//g'))
dicon="$data/entries/icons/hicolor";mkdir -p "$dicon"
for dd in usr/share/icons usr/share/p* ;do
[ -d "$dd" -a ! -z "$icon" ] && picon=$(find $dd/ -name $icon* |sed -n '1p')
[ ! -z "$picon" ] &&mv "$picon" "$dicon" && sed -i "s:Icon=.*:Icon=/$dicon/$(basename $picon):g" $ccc
done
done
done
rm usr etc -rf
sed -i "s/Package:.*/Package: $appid.$name/g" DEBIAN/control
sed -i "s/$arch/$arch/g" DEBIAN/control
cd ..
dpkg-deb -b uos-$$ "$appid.$name""_$ver""_uos_$arch.deb"
rm uos-$$ -rf ;;
esac
fi;done


}

relib() {
libdeb="
$ML/$JC/deb-*/libqtcore4*deb
$ML/$JC/deb-*/libqtgui4*deb
$ML/$JC/deb-*/libqtdbus4*deb
$ML/$JC/deb-*/qdbus_*deb
$ML/$JC/deb-*/qt4-*deb
$ML/$JC/deb-*/libqt4-*deb"
case $JC in
*-libs)
jlapt
for lib in $libdeb ;do
if [ -f "$lib" ];then
dpkg-deb -R "$lib" rebuild-$$
tarlib=$(basename "$lib")
cd rebuild-$$
case "$lib" in
*qtcore4*)
rm DEBIAN/conffiles DEBIAN/md5sums DEBIAN/symbols -rf
[ ! -f usr/$tarlib.tar ]&& tar cf usr/$tarlib.tar etc/xdg usr/lib/*-linux-gnu/qt-default
rm etc/xdg usr/lib/*-linux-gnu/qt-default -rf ;;
*qtdbus4*)
sed -i  '/Breaks:/d' DEBIAN/control
sed -i  '/Replaces:/d' DEBIAN/control ;;
esac
sed -i  's/[0-9]ubuntu/8/g' DEBIAN/control
sed -i  's/dfsg-../dfsg-50/g' DEBIAN/control
sed -i  '/Original-Maintainer/d' DEBIAN/control
echo "Original-Maintainer:chenoukan@qomogoo.org">> DEBIAN/control
cd ..
mv "$lib" "$ML/tmp"
dpkg-deb -b rebuild-$$ "$lib"
rm rebuild-$$ -rf
fi
done
jlapt 2>/dev/null ;;
esac
}

zhdeb() {
cd "$DQML"
if [ -f "$1" ];then
dpkg-deb -R "$1" rebuild-$$
cd rebuild-$$
mkdir -p usr/share/applicatons
sed -i  's/deepin-elf-verify[^\,]*\,//g' DEBIAN/control
sed -i  's/deepin-elf-verify[^\,]*//g' DEBIAN/control
[ -d  opt ] && for cc in $(find opt/ -name *.desktop) ;do
icon=$(basename $(cat "$cc"|grep Icon|sed -e 's/Icon=//g'))
for dd in opt/apps/*/entries/icons ;do
[ -d "$dd" -a ! -z "$icon" ] && picon=$(find $dd/ -name $icon* |sed -n '1p')
[ ! -z "$picon" ] && sed -i "s:Icon=.*:Icon=/$picon:g" $cc
[ -f "$CC" ] && cp "$cc" usr/share/applications/ -rf

done
done
cd ..
mv "$1" "$ML/tmp"
dpkg-deb -b rebuild-$$ "$1"
rm rebuild-$$ -rf
fi
}
zhdebarch() {
cd "$DQML"
exec="$ML/.electron/mips.tgz"
pname=$(echo "$1"|sed -e 's/amd64//g')
pname=$(echo "$pname"|sed -e 's/.deb/mips64el.deb/g')
if [ -f "$exec" ]; then
[ ! -f /usr/bin/alien ]&& apt install alien
if [ -f "$1" ];then
dpkg-deb -R "$1" rebuild-$$
cd rebuild-$$
path=$(pwd)
mkdir -p tmp
mkdir -p usr/bin
mkdir -p usr/share/applications
sed -i  's/deepin-elf-verilf//g' DEBIAN/control
sed -i  's/amd64/mips64el/g' DEBIAN/control
dira=$(dirname $(find . -name resources))
if [ -d "$dira/resources" ];then
cd tmp
tar xzf "$exec"
cd $(ls)
patha=$(pwd)
cd "$path"
echo >"$dira/libminigbm.so"
for lib in $(ls $patha/lib*);do
lib=$(basename $lib)
[ ! -f "$dira/$lib" ]&& rm "$patha/$lib"
done
mkdir -p usr/share
[ -d opt/apps ] && cp $(find opt/apps/ -name "entries")/* usr/share/ -rf
cat $(find usr/share -name "*.desktop")|grep Exec |while read ename a c d;do
ename=$(basename $(echo $ename|sed -e 's/Exec=//g'))
tee <<bashfile>usr/bin/$ename
#!/bin/sh
/$dira/$ename \$@
bashfile
chmod +x usr/bin/$ename
mv "$patha/electron" "$patha/$ename"
break;done
cp -rf "$dira/resources" "$patha"
rm "$dira"/* -rf
mv -f $patha/* $dira/
rm -rf tmp
else
cd ..
rm rebuild-$$ -rf
exit
fi
cd ..
dpkg-deb -b rebuild-$$ "$pname"
mkdir -p $ML/$JC/rpm-loogson
alien -r --scripts "$pname"
mv *mips64el.rpm $ML/$JC/rpm-loogson/
scdeb "$pname"
rm rebuild-$$ -rf
fi;fi
exit
}

startinst() {
if [ -d /etc/nginx/vhost ];then
httpcnf=/etc/nginx/vhost/apt8010.conf
else
httpcnf=/etc/okapps-nginx.conf;fi
tee <<nginxcf>$httpcnf
server
    {
        listen 80;
        server_name $BJFWQ;
        root $ML;

        location / {
            autoindex on;   
            autoindex_exact_size off;   
            autoindex_localtime on;   
        }

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        access_log off;
    }
nginxcf
tee <<service>/etc/init.d/okapps
#!/bin/bash
### BEGIN INIT INFO
# Provides:          okapps
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      1
# Short-Description: OKApp
# Description:       Auto Start PPTP VPN By sjchenkan
### END INIT INFO
export PATH=/bin:/sbin:$PATH
case "\$1" in
start) /bin/okapps auto 2>&1 >tmp/vpnook.log & ;;
stop) echo not stop ;;
esac
service

chmod +x /etc/init.d/okapps
if [ -x /sbin/chkconfig ];then
chkconfig okapps on
elif [ -f /usr/sbin/update-rc.d ];then
update-rc.d okapps start 80 2 3 4 5 . stop 80 1 .
update-rc.d okapps enable
elif type -p systemctl ;then
systemctl enable okapps ;fi
useradd okapps -m -s /bin/nologin
case "$0" in
/*)cp "$0" /bin/okapps ;;
*)cp "$DQML/$0" /bin/okapps ;;
esac
chmod +x /bin/okapps
chmod -R +w /home/okapps
chown -R okapps:okapps /home/okapps
mkdir -p $ML/.deb/$JC
chown -R okapps:okapps $ML &
chmod -R 755 $ML &
apt install -y python3-pip
pip3 install pyftpdlib
if [ ! -f /home/.okappscnf ];then
tee<<PASCNF>/home/.okappscnf
$$apps
$$apps
PASCNF
fi
passwd okapps</home/.okappscnf
}

zidong() {
export HOME=/home/okapps
chmod -R 777 $ML
okftp
while [ k == k ];do
case $(date +%d) in
*5|*1|*8) xzdeb &
sleep 3600 ;;
esac
sudo -u okapps $0 build 2>&1 >/tmp/okapps.log &
sleep 21600
done
}

okftp() {
if [ -f /home/.okftp.cnf ];then
. /home/.okftp.cnf
else
echo FTP user amd password:
read yonghu mima
[ -z "$mima" ] && okftp
duankou=8501
tee <<cnf>/home/.okftp.cnf
yonghu=$yonghu
mima=$mima
duankou=8501
cnf
fi


tee <<pyftp>/tmp/pyftp.py
import os
from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.handlers import FTPHandler
from pyftpdlib.servers import FTPServer

def main():
    authorizer = DummyAuthorizer()
    authorizer.add_user('$yonghu', '$mima', '$ML/.deb', perm='elradfmwM')
    authorizer.add_anonymous(os.getcwd())

    # Instantiate FTP handler class
    handler = FTPHandler
    handler.authorizer = authorizer
    address = ('', $duankou)
    server = FTPServer(address, handler)

    # set a limit for connections
    server.max_cons = 256
    server.max_cons_per_ip = 5
    # start ftp server
    server.serve_forever()

if __name__ == '__main__':
    main()
pyftp
sudo -u okapps python3 /tmp/pyftp.py &

}

upfwq() {
cd $ML
if [ -f ./.up.look ]; then
exit ; fi
echo >./.up.look
if [ ! -f ~/.ssh/$(basename $0 ) ];then
ssh-copy-id ck@103.235.222.153 -p 22
cp $0 ~/.ssh/$(basename  $0 ) ;fi
ssh ck@103.235.222.153 rm $ML2/deb-*/*
scp -r $ML/$JC/* ck@103.235.222.153:$ML2/
rm ./.up.look
}

cnf() {
for cnf in $ML/.okapps* ;do
if [ -f $cnf ];then
. $cnf
$1 $2
fi
done
}

daoroot() {
if [ $(id -u) != 0 ];then
cd "$DQML"
if [ ! -f ~/.ssh/mm$(basename "$0").key ];then
echo Sudo Password?
read mm
ka=$(echo $mm|base64 -i)
kb=$(echo $(md5sum /etc/passwd)|base64 -i|sed -n '1p')
kd=$(echo $(id;date +%m)|base64 -i|sed -n '1p')
echo $kd$ka$kb|tr -d '[ |=|\-]'>~/.ssh/mm$(basename "$0").key ;fi
pass="$(cat ~/.ssh/mm$(basename "$0").key)" 
kb=$(echo $(md5sum /etc/passwd)|base64 -i|sed -n '1p')

kd=$(echo $(id;date +%m)|base64 -i|sed -n '1p')
pass=$(echo "$pass"|sed -e "s/$kd//g")
echo "$pass=="|sed -e "s/$kb//g"|base64 -d|sudo -S bash "$0" "$@" 
sleep 2
if [ -f ~/.ssh/mm$(basename "$0").key.look ]; then
rm -rf ~/.ssh/mm$(basename "$0").key.look ;else
rm -rf ~/.ssh/mm$(basename "$0").key*;fi
exit
elif [ -f ~/.ssh/mm$(basename "$0").key ]; then
cp ~/.ssh/mm$(basename "$0").key ~/.ssh/mm$(basename "$0").key.look
fi
}

if [ -f /etc/okapps ];then
. /etc/okapps
else
daoroot
tee <<okcnf>/etc/okapps
MC=OKLinux
JC=lroapps
LX=app
ZZ=lroapps
BB=2.0
FWQ=
TB=n
DH=
BJFWQ=okapps.oukan.online
SSHFWQ="okapps@oukan.online"
ML2=/home/wwwroot/$BJFWQ
ML=/home/wwwroot/lroapps
JX="

"
XZAPP="

"
okcnf
. /etc/okapps
mkdir -p $ML
[ ! -f $ML/.okapps ] && cp /etc/okapps $ML/.okapps
fi
DQML=$(pwd)
[ -f ~/.gpgkeycnf ]&& . ~/.gpgkeycnf
[ -d $ML ] && cd $ML


case $1 in
setup)daoroot $1;startinst;;
deb|*.deb) cnf scdeb "$@" ;;
icons) cnf tubiao "$@" ;;
uos) touos "$@" ;;
build) cnf jlapt $2 & ;;
rebuild)zhdeb "$2";;
relib) cnf relib ;;
down) echo > $ML/.DEB.LIST
cnf xzdeb $2 & ;;
mips)cnf zhdebarch $2 & ;;
tb) cnf mirapt $2 & ;;
auto) cnf zidong & ;;
ftp) okftp "$@";;
esac


